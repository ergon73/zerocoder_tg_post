# üá∑üá∫ –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ / üá∫üá∏ Import required libraries
import os
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from openai import OpenAI
import requests
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import logging
from pathlib import Path
from fastapi import Request
import httpx

# üá∑üá∫ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env / üá∫üá∏ Load environment variables
print("–¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥:", Path.cwd())
print("–§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", Path('.env').exists())
if Path('.env').exists():
    with open('.env', encoding='utf-8') as f:
        print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env:\n", f.read())

load_dotenv(dotenv_path=Path.cwd() / ".env")

print("[DEBUG] OPENAI_API_KEY:", os.getenv("OPENAI_API_KEY"))
print("[DEBUG] CURRENTS_API_KEY:", os.getenv("CURRENTS_API_KEY"))

# üá∑üá∫ –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ / üá∫üá∏ Create FastAPI app
app = FastAPI()

# üá∑üá∫ –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è / üá∫üá∏ Load API keys from environment
currents_api_key = os.getenv("CURRENTS_API_KEY")

# ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω–≥
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("tgpost-debug")

logger.debug(f"[DEBUG] CURRENTS_API_KEY: {currents_api_key}")

# üá∑üá∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π / üá∫üá∏ Check for missing API keys
if not currents_api_key:
    logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω CURRENTS_API_KEY (–≤ .env —Ñ–∞–π–ª–µ)")
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω CURRENTS_API_KEY (–≤ .env —Ñ–∞–π–ª–µ)")

# üá∑üá∫ –ú–æ–¥–µ–ª—å –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö / üá∫üá∏ Input data model
class Topic(BaseModel):
    topic: str

# üá∑üá∫ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π / üá∫üá∏ Fetch recent news from Currents API
def get_recent_news(topic: str) -> str:
    url = "https://api.currentsapi.services/v1/latest-news"
    params = {
        "language": "en",
        "keywords": topic,
        "apiKey": currents_api_key
    }
    logger.debug(f"[DEBUG] Currents API request params: {params}")
    response = requests.get(url, params=params)
    logger.debug(f"[DEBUG] Currents API response status: {response.status_code}")
    logger.debug(f"[DEBUG] Currents API response body: {response.text}")

    if response.status_code != 200:
        logger.error(f"–û—à–∏–±–∫–∞ Currents API: {response.text}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ Currents API: {response.text}")

    articles = response.json().get("news", [])
    if not articles:
        logger.info("–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ")
        return "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"

    return "\n".join([f"- {article['title']}" for article in articles[:5]])

# üá∑üá∫ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI / üá∫üá∏ Generate content with OpenAI
def generate_content(topic: str) -> dict:
    news_context = get_recent_news(topic)
    try:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        client = OpenAI()
        response_title = client.chat.completions.create(
            model="gpt-4o",
            messages=[{
                "role": "user",
                "content": f"–ü—Ä–∏–¥—É–º–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É '{topic}', —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π:\n{news_context}"
            }],
            max_tokens=60,
            temperature=0.5
        )
        if not response_title.choices or not hasattr(response_title.choices[0], "message"):
            logger.error(f"OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫: {response_title}")
            raise HTTPException(status_code=500, detail="OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫")
        title = response_title.choices[0].message.content
        if title is None:
            raise HTTPException(status_code=500, detail="OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫")
        title = title.strip()

        # –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ
        response_meta = client.chat.completions.create(
            model="gpt-4o",
            messages=[{
                "role": "user",
                "content": f"–ù–∞–ø–∏—à–∏ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—å–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º: '{title}'."
            }],
            max_tokens=100,
            temperature=0.5
        )
        if not response_meta.choices or not hasattr(response_meta.choices[0], "message"):
            logger.error(f"OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ: {response_meta}")
            raise HTTPException(status_code=500, detail="OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ")
        meta = response_meta.choices[0].message.content
        if meta is None:
            raise HTTPException(status_code=500, detail="OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–µ –º–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ")
        meta = meta.strip()

        # –ü–æ–ª–Ω—ã–π –ø–æ—Å—Ç
        response_post = client.chat.completions.create(
            model="gpt-4o",
            messages=[{
                "role": "user",
                "content": (
                    f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É '{topic}', –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n{news_context}\n"
                    "–°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π, —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–π, —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã."
                )
            }],
            max_tokens=1500,
            temperature=0.5
        )
        if not response_post.choices or not hasattr(response_post.choices[0], "message"):
            logger.error(f"OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {response_post}")
            raise HTTPException(status_code=500, detail="OpenAI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
        post = response_post.choices[0].message.content
        if post is None:
            raise HTTPException(status_code=500, detail="OpenAI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
        post = post.strip()

        return {
            "title": title,
            "meta_description": meta,
            "post_content": post
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")

# üá∑üá∫ POST-–∑–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ / üá∫üá∏ API endpoint to generate blog post
@app.post("/generate-post")
async def generate_post_api(payload: Topic):
    return generate_content(payload.topic)

# üá∑üá∫ –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç / üá∫üá∏ Root endpoint
@app.get("/")
def root():
    return {"message": "Service is running"}

# üá∑üá∫ Telegram –±–æ—Ç / üá∫üá∏ Telegram bot functionality
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN (–≤ .env —Ñ–∞–π–ª–µ)")
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN (–≤ .env —Ñ–∞–π–ª–µ)")

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

async def send_telegram_message(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                TELEGRAM_API_URL,
                json={
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": "HTML"
                }
            )
            response.raise_for_status()
            logger.debug(f"Telegram API response: {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")

@app.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    try:
        update = await request.json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram: {update}")
        
        if "message" in update:
            message = update["message"]
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            
            if text.startswith("/generate"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                topic = text.replace("/generate", "").strip()
                if topic:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    await send_telegram_message(chat_id, f"üîÑ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–º–µ: <b>{topic}</b>")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    try:
                        result = generate_content(topic)
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        response_text = (
                            f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n"
                            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b>\n{result['title']}\n\n"
                            f"<b>–ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n{result['meta_description']}\n\n"
                            f"<b>–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:</b>\n{result['post_content']}"
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        await send_telegram_message(chat_id, response_text)
                    except Exception as e:
                        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}"
                        await send_telegram_message(chat_id, error_message)
                else:
                    await send_telegram_message(
                        chat_id,
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /generate\n–ü—Ä–∏–º–µ—Ä: /generate –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
                    )
            elif text == "/start":
                await send_telegram_message(
                    chat_id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate —Å —Ç–µ–º–æ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: /generate –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
                )
        
        return {"status": "success"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {str(e)}")

# üá∑üá∫ –≠–Ω–¥–ø–æ–∏–Ω—Ç heartbeat / üá∫üá∏ Heartbeat check
@app.get("/heartbeat")
def heartbeat():
    return {"status": "OK"}
